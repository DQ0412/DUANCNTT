import axios from "axios";
import { message } from "antd";

const BASE_URL = "http://127.0.0.1:8000/api";

//  Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
export const AddToCart = (product) => async (dispatch, getState) => {
    try {
        const { userSignin: { userInfo } } = getState();
        
        if (!userInfo || !userInfo.token) {
            message.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ th√™m v√†o gi·ªè h√†ng!");
            return;
        }

        const response = await axios.post(
            `${BASE_URL}/cart/add`, 
            { product_id: product.id, quantity: 1 }, 
            { headers: { Authorization: `Bearer ${userInfo.token}` } }
        );
        dispatch(fetchCart()); 
        dispatch({ type: "ADD_TO_CART", payload: response.data });
        dispatch(fetchCart()); //  Load l·∫°i gi·ªè h√†ng sau khi th√™m s·∫£n ph·∫©m
        message.success("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi th√™m v√†o gi·ªè h√†ng:", error.response?.data || error);
        message.error(error.response?.data?.message || "Kh√¥ng th·ªÉ th√™m v√†o gi·ªè h√†ng!");
    }
};

//  L·∫•y gi·ªè h√†ng t·ª´ API
export const fetchCart = () => async (dispatch, getState) => {
    try {
        const { userSignin: { userInfo } } = getState();
        if (!userInfo || !userInfo.token) return;

        const response = await axios.get(`${BASE_URL}/cart`, {
            headers: { Authorization: `Bearer ${userInfo.token}` }
        });

        dispatch({ type: "FETCH_CART_SUCCESS", payload: response.data.cart || [] });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y gi·ªè h√†ng:", error.response?.data || error);
    }
};

//  X√≥a to√†n b·ªô s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
export const DeleteToCart = (productId) => async (dispatch, getState) => {
    try {
        const { userSignin: { userInfo } } = getState();
        console.log("üìå ƒêang g·ª≠i y√™u c·∫ßu x√≥a s·∫£n ph·∫©m ID:", productId);

        if (!productId) {
            console.error("‚ùå Kh√¥ng c√≥ `productId` ƒë·ªÉ x√≥a!");
            message.error("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m do thi·∫øu ID!");
            return;
        }

        if (!userInfo || !userInfo.token) {
            message.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ x√≥a s·∫£n ph·∫©m.");
            return;
        }

        await axios.delete(`${BASE_URL}/cart/remove/${productId}`, {
            headers: { Authorization: `Bearer ${userInfo.token}` }
        });

        dispatch(fetchCart()); // ‚úÖ Load l·∫°i gi·ªè h√†ng sau khi x√≥a
        message.success("X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a s·∫£n ph·∫©m:", error.response?.data || error);
        message.error("Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!");
    }
};




//  C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè h√†ng
export const UpdateQtyProduct = (productId, quantity) => async (dispatch, getState) => {
    try {
        const { userSignin: { userInfo } } = getState();
        
        if (!userInfo || !userInfo.token) {
            message.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng.");
            return;
        }

        if (!productId) {
            console.error("‚ùå L·ªói: productId b·ªã undefined khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
            return;
        }

        console.log("üîπ G·ª≠i y√™u c·∫ßu c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", { productId, quantity });

        const response = await axios.put(
            `${BASE_URL}/cart/update-quantity/${productId}`,
            { quantity },
            { headers: { Authorization: `Bearer ${userInfo.token}` } }
        );

        console.log("‚úÖ Ph·∫£n h·ªìi t·ª´ server:", response.data);

        dispatch(fetchCart()); // Load l·∫°i gi·ªè h√†ng sau khi c·∫≠p nh·∫≠t
        message.success("C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:", error.response?.data || error);
        message.error(error.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
    }
};


//  X√≥a t·ª´ng s·ªë l∆∞·ª£ng s·∫£n ph·∫©m (gi·∫£m s·ªë l∆∞·ª£ng)
export const DeleteQtyProduct = (productId) => async (dispatch, getState) => {
    try {
        const { userSignin: { userInfo } } = getState();
        if (!userInfo || !userInfo.token) {
            message.error("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ c·∫≠p nh·∫≠t gi·ªè h√†ng.");
            return;
        }

        const response = await axios.put(
            `${BASE_URL}/cart/decrease-quantity/${productId}`,
            {},
            { headers: { Authorization: `Bearer ${userInfo.token}` } }
        );

        dispatch(fetchCart()); //  Load l·∫°i gi·ªè h√†ng sau khi gi·∫£m s·ªë l∆∞·ª£ng
        message.success("Gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m th√†nh c√¥ng!");
    } catch (error) {
        console.error("‚ùå L·ªói khi gi·∫£m s·ªë l∆∞·ª£ng s·∫£n ph·∫©m:", error.response?.data || error);
        message.error("Kh√¥ng th·ªÉ gi·∫£m s·ªë l∆∞·ª£ng!");
    }
};
