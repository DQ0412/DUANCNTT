<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;
use Exception;

class PaymentController extends Controller
{
    /**
     * T·∫°o URL thanh to√°n VNPay.
     */
    public function createVNPayPayment(Request $request)
{
    try {
        Log::info("üì• Nh·∫≠n y√™u c·∫ßu thanh to√°n VNPay:", $request->all());

        $validated = $request->validate([
            'amount' => 'required|numeric|min:1',
            'orderId' => 'required|integer',
        ]);

        // C√°c gi√° tr·ªã c·∫ßn thi·∫øt cho thanh to√°n VNPay
        $vnp_TmnCode = env('VNPAY_TMN_CODE', 'LZP3OOG9'); // M√£ Merchant ID
        $vnp_HashSecret = env('VNPAY_HASH_SECRET', '7CCVDF88DR6GGCM4P4OAAHLWW7CBGOER'); // Chu·ªói b√≠ m·∫≠t
        $vnp_Url = env('VNPAY_URL', 'https://sandbox.vnpayment.vn/paymentv2/vpcpay.html'); // URL Sandbox

        $vnp_TxnRef = $validated['orderId'];
        $vnp_Amount = (int) ($validated['amount'] * 100); // Chuy·ªÉn th√†nh s·ªë nguy√™n
        $vnp_Locale = 'vn';
        $vnp_IpAddr = request()->ip();
        $vnp_ReturnUrl = route('vnpay.success');

        // T·∫°o d·ªØ li·ªáu g·ª≠i l√™n VNPay
        $inputData = [
            "vnp_Version" => "2.1.0",
            "vnp_TmnCode" => $vnp_TmnCode,
            "vnp_Amount" => $vnp_Amount,
            "vnp_Command" => "pay",
            "vnp_CreateDate" => date('YmdHis'),
            "vnp_CurrCode" => "VND",
            "vnp_IpAddr" => $vnp_IpAddr,
            "vnp_Locale" => $vnp_Locale,
            "vnp_OrderInfo" => "Thanh to√°n ƒë∆°n h√†ng #$vnp_TxnRef",
            "vnp_OrderType" => "billpayment",
            "vnp_ReturnUrl" => $vnp_ReturnUrl,
            "vnp_TxnRef" => $vnp_TxnRef,
        ];

        // S·∫Øp x·∫øp c√°c tham s·ªë theo th·ª© t·ª±
        ksort($inputData);

        // T·∫°o query string
        $query = '';
        foreach ($inputData as $key => $value) {
            $query .= urlencode($key) . "=" . urlencode($value) . '&';
        }
        $query = rtrim($query, '&'); // Lo·∫°i b·ªè d·∫•u & cu·ªëi c√πng

        // T√≠nh to√°n SecureHash
        $vnp_SecureHash = hash_hmac('sha512', $query, $vnp_HashSecret);

        // T·∫°o URL thanh to√°n
        $vnp_Url .= "?" . $query . "&vnp_SecureHash=" . $vnp_SecureHash;

        Log::info("üì§ URL thanh to√°n VNPay:", ['url' => $vnp_Url]);

        return response()->json(['code' => "00", 'data' => $vnp_Url]);

    } catch (Exception $e) {
        Log::error("‚ùå L·ªói t·∫°o thanh to√°n VNPay:", ['error' => $e->getMessage()]);
        return response()->json(['code' => "01", 'message' => 'L·ªói khi t·∫°o thanh to√°n VNPay'], 500);
    }
}

    /**
     * X·ª≠ l√Ω k·∫øt qu·∫£ thanh to√°n VNPay.
     */
    public function vnpayReturn(Request $request)
{
    // Ghi l·∫°i th√¥ng tin nh·∫≠n ƒë∆∞·ª£c t·ª´ VNPay
    //Log::info("üì• K·∫øt qu·∫£ thanh to√°n VNPay:", $request->all());

    // Chuy·ªÉn h∆∞·ªõng ng∆∞·ªùi d√πng ƒë·∫øn trang th√†nh c√¥ng
    return redirect()->route('vnpaysuccess.js'); // Ho·∫∑c b·∫°n c√≥ th·ªÉ thay 'vnpay.success' b·∫±ng URL c·ª• th·ªÉ
}

}
